package emotivemachine.sws_control;
import java.io.IOException;
import java.net.*;

import processing.core.*;

public class SpaceWithinSpacesControl {
  private final static int ARRAY_WIDTH = 10;
  private final static int ARRAY_HEIGHT = 18;
  private final static int ARRAY_PORT = 4210;
  private InetAddress BROADCAST_ADDRESS;

  // A lookup table for bulb brightness which linearizes the output
  // Derived from measurements of the real array
  private final static double[] BRIGHTNESS_LOOKUP = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0.01853246178891944, 0.2797469357554768, 0.5424164092583005, 0.8065599924501912,
    1.072197192953612, 1.3393479272153268, 1.6080325322748468, 1.8782717779650688,
    2.1500868795644688, 2.423499510921214, 2.698531818070675, 2.9752064333689403,
    3.2535464901661935, 3.5335756380450913, 3.8153180586506963, 4.098798482139933,
    4.384042204280215, 4.671075104228402, 4.959923663023208, 5.250614982825908,
    5.543176806946347, 5.837637540693328, 6.1340262730908, 6.432372799503723,
    6.732707645220107, 7.035062090038586, 7.339468193913754, 7.645958823714974,
    7.954567681157482, 8.265329331968731, 8.578279236356385, 8.893453780849176,
    9.210890311585947, 9.530627169133453, 9.852703724918621, 10.177160419366688,
    10.504038801842807, 10.833381572501374, 11.165232626154236, 11.499637098276912,
    11.83664141328021, 12.17629333518336, 12.518642020834893, 12.863738075837727,
    13.211633613346466, 13.56238231591726, 13.916039500603958, 14.272662187508942,
    14.632309172012928, 14.995041100924993, 15.360920552813432, 15.730012122797916,
    16.102382512106267, 16.47810062272359, 16.857237657487776, 17.23986722601523,
    17.626065456872603, 18.015911116444993, 18.40948573499066, 18.80687374041396,
    19.20816260033538, 19.613442973089114, 20.022808868335463, 20.436357818038232,
    20.854191058626906, 21.276413725240218, 21.703135059033897, 22.13446862862923,
    22.57053256688611, 23.01144982430062, 23.457348440459466, 23.908361835130293,
    24.364629120730562, 24.826295438102683, 25.293512317729572, 25.766438068757765,
    26.245238198457592, 26.73008586504559, 27.221162367131246, 27.71865767342743,
    28.222770996798243, 28.733711417207513, 29.25169855869231, 29.77696332612672,
    30.309748708275407, 30.85031065448044, 31.398919033295996, 31.955858682508524,
    32.52143056127821, 33.095953016645666, 33.67976317840487, 34.27321849839265,
    34.876698452650075, 35.490606427731805, 36.115371815774004, 36.751452346870074,
    37.39933669198742, 38.05954737524251, 38.732644041036785, 39.41922712959488,
    40.119942024154, 40.83548374483423, 41.5666022785767, 42.31410865213833,
    43.07888187681018, 43.861876920391815, 44.66413389543891, 45.48678869479918,
    46.33108535849075, 47.19839052341888, 48.09021039384325, 49.008210782116414,
    49.95424091458901, 50.930361888665615, 51.938880920614, 52.98239286385669,
    54.063830938747046, 55.186529247947036, 56.35430053186222, 57.57153385996265,
    58.84331873116277, 60.1756046436298, 61.575409029086806, 63.0510922437808,
    64.61272726386571, 66.27260590073902, 68.04594635871216, 69.95190540437663,
    72.01506470742495, 74.26767911969107, 76.75319292928357, 79.5319466796385,
    82.69080966260142, 86.36002806382984, 90.74302573667843, 96.16398943296242,
    103.0927485142313, 111.81919216499658, 121.34085012800233, 129.89421683810912,
    137.01301236181416, 143.00264376327473, 148.19174537513612, 152.80847568708555,
    157.0041213132417, 160.8814490005779, 164.51298940355701, 167.95199428834627,
    171.23908116022133, 174.40640461549248, 177.48039166271647, 180.48363092995675,
    183.43626588242, 186.3571163583653, 189.2646927533425, 192.17825254286586,
    195.11907875848866, 198.11225726441486, 253.53806761175719, 251.7062662422377,
    249.63713497599701, 247.2266572471095, 244.26416803449365, 240.16013002829973,
    240.16013002829973, 240.16013002829973, 240.16013002829973
  };

  private PApplet parent;
  private boolean useCanvas;
  private DatagramSocket sock;

  public PImage currentFrame;

  public SpaceWithinSpacesControl(PApplet parent, boolean useCanvas) {
    this.parent = parent;
    parent.registerMethod("dispose", this);

    if (useCanvas) {
      parent.registerMethod("post", this);
    }

    this.useCanvas = useCanvas;

    try {
      BROADCAST_ADDRESS = InetAddress.getByName("255.255.255.255");
    } catch (UnknownHostException e) {
      e.printStackTrace();
    }

    try {
      this.sock = new DatagramSocket();
      this.sock.setBroadcast(true);
    } catch (SocketException e) {
      e.printStackTrace();
    }
  }

  public SpaceWithinSpacesControl(PApplet parent) {
    this(parent, true);
  }

  private byte[] imageToBytes(PImage image) {
    byte[] bytes = new byte[ARRAY_WIDTH * ARRAY_HEIGHT + ARRAY_HEIGHT / 2];

    for (int y = 0; y < image.height; y++) {
      for (int x = 0; x < image.width; x++) {
        int brightness = (int)parent.brightness(image.get(x, y));
        bytes[y * ARRAY_WIDTH + x + (y % 2 == 1 ? 1 : 0)] = (byte)BRIGHTNESS_LOOKUP[brightness];
      }
    }

    return bytes;
  }

  public void send(PImage frame) {
    if (frame.width != ARRAY_WIDTH || frame.height != ARRAY_HEIGHT) {
      throw new RuntimeException("Image wrong size for array");
    }

    byte[] imageBytes = imageToBytes(frame);
    DatagramPacket packet = new DatagramPacket(imageBytes, imageBytes.length, BROADCAST_ADDRESS, ARRAY_PORT);

    try {
      this.sock.send(packet);
    } catch (IOException e) {
      e.printStackTrace();
    }
  }

  public void post() {
    currentFrame = parent.get();
    currentFrame.resize(ARRAY_WIDTH, ARRAY_HEIGHT);
    send(currentFrame);
  }

  public void dispose() {
    this.sock.close();
  }
}
